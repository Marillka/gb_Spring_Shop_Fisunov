Предствавим что у вас в проекте пять сервисов. И в каждом сервисе по пять методов. Итого 25 методов в проекте.
Вы решили для отладки, профилеровки при вызове каждого метода добавить строчку log(такой то метод запустился).
И когда метод закончит работу, хотелось бы чтобы была надпись "Такой то метод завершил работу".
Это приведет к тому, что вам 25 раз придется прописывать по несколько строк кода.


Поскольку AOP код может работать в нескольких местах, вы можете запихнуть в логику AOP метода какую нибудь блокировку. Например ожидание нажатия кнопки пробел.
И соответственно у вам Web Server и все методы начнут ждать нажатия.
Никакий блокирующих операци в AOP быть не должно.
Никаких долгих операций в AOP быть не должно - поскольку у вас логика распространяется на n количество методов, количество которых может только расти со временем. То вы в некоторой пропорции затормаживаете весь ваш проект какой то долгой логикой.
AOP код должен быть максимально простым. Если вы в AOP запилите какую то хитрую логику, которую сами не сможете разобрать, то это может привести к тому, что у вам во многим местах полезут ошибки.

На статике работать не будет, потому что - мы не можем переопределить статический метод.
Как работает класическое проксирование. У вас создается класс, который подменяет методы, которые изменены. Создается новая версия этого метода, добавляется какой то кусочек кода в начала, какой то кусочек в конце и между ними вызывается метод ориганального объекта. Если метод статический - то переопределить вы его не сможете, и соответственно и переопределить.
